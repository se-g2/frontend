import type { SFCWithInstall } from 'element-plus/es/utils/types';
import ButtonGroup from './src/button-group.vue';
declare const _Button: SFCWithInstall<import("vue").DefineComponent<{
    type: {
        type: ((new (...args: any[]) => ("text" | "success" | "info" | "warning" | "default" | "primary" | "danger") & {}) | (() => "text" | "success" | "info" | "warning" | "default" | "primary" | "danger")) | ((new (...args: any[]) => ("text" | "success" | "info" | "warning" | "default" | "primary" | "danger") & {}) | (() => "text" | "success" | "info" | "warning" | "default" | "primary" | "danger"))[];
        default: string;
        validator: (val: string) => boolean;
    };
    size: {
        type: import("vue").PropType<import("element-plus/es/utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    nativeType: {
        type: ((new (...args: any[]) => ("reset" | "submit" | "button") & {}) | (() => "reset" | "submit" | "button")) | ((new (...args: any[]) => ("reset" | "submit" | "button") & {}) | (() => "reset" | "submit" | "button"))[];
        default: string;
        validator: (val: string) => boolean;
    };
    loading: BooleanConstructor;
    disabled: BooleanConstructor;
    plain: BooleanConstructor;
    autofocus: BooleanConstructor;
    round: BooleanConstructor;
    circle: BooleanConstructor;
}, {
    buttonSize: import("vue").ComputedRef<any>;
    buttonDisabled: import("vue").ComputedRef<boolean>;
    handleClick: (evt: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    type?: unknown;
    size?: unknown;
    icon?: unknown;
    nativeType?: unknown;
    loading?: unknown;
    disabled?: unknown;
    plain?: unknown;
    autofocus?: unknown;
    round?: unknown;
    circle?: unknown;
} & {
    circle: boolean;
    type: "text" | "success" | "info" | "warning" | "default" | "primary" | "danger";
    disabled: boolean;
    loading: boolean;
    icon: string;
    nativeType: "reset" | "submit" | "button";
    plain: boolean;
    autofocus: boolean;
    round: boolean;
} & {
    size?: import("element-plus/es/utils/types").ComponentSize;
}> & {
    onClick?: (...args: any[]) => any;
}, {
    circle: boolean;
    type: "text" | "success" | "info" | "warning" | "default" | "primary" | "danger";
    disabled: boolean;
    loading: boolean;
    icon: string;
    nativeType: "reset" | "submit" | "button";
    plain: boolean;
    autofocus: boolean;
    round: boolean;
}>> & {
    ButtonGroup: typeof ButtonGroup;
};
export default _Button;
export declare const ElButton: SFCWithInstall<import("vue").DefineComponent<{
    type: {
        type: ((new (...args: any[]) => ("text" | "success" | "info" | "warning" | "default" | "primary" | "danger") & {}) | (() => "text" | "success" | "info" | "warning" | "default" | "primary" | "danger")) | ((new (...args: any[]) => ("text" | "success" | "info" | "warning" | "default" | "primary" | "danger") & {}) | (() => "text" | "success" | "info" | "warning" | "default" | "primary" | "danger"))[];
        default: string;
        validator: (val: string) => boolean;
    };
    size: {
        type: import("vue").PropType<import("element-plus/es/utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    nativeType: {
        type: ((new (...args: any[]) => ("reset" | "submit" | "button") & {}) | (() => "reset" | "submit" | "button")) | ((new (...args: any[]) => ("reset" | "submit" | "button") & {}) | (() => "reset" | "submit" | "button"))[];
        default: string;
        validator: (val: string) => boolean;
    };
    loading: BooleanConstructor;
    disabled: BooleanConstructor;
    plain: BooleanConstructor;
    autofocus: BooleanConstructor;
    round: BooleanConstructor;
    circle: BooleanConstructor;
}, {
    buttonSize: import("vue").ComputedRef<any>;
    buttonDisabled: import("vue").ComputedRef<boolean>;
    handleClick: (evt: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    type?: unknown;
    size?: unknown;
    icon?: unknown;
    nativeType?: unknown;
    loading?: unknown;
    disabled?: unknown;
    plain?: unknown;
    autofocus?: unknown;
    round?: unknown;
    circle?: unknown;
} & {
    circle: boolean;
    type: "text" | "success" | "info" | "warning" | "default" | "primary" | "danger";
    disabled: boolean;
    loading: boolean;
    icon: string;
    nativeType: "reset" | "submit" | "button";
    plain: boolean;
    autofocus: boolean;
    round: boolean;
} & {
    size?: import("element-plus/es/utils/types").ComponentSize;
}> & {
    onClick?: (...args: any[]) => any;
}, {
    circle: boolean;
    type: "text" | "success" | "info" | "warning" | "default" | "primary" | "danger";
    disabled: boolean;
    loading: boolean;
    icon: string;
    nativeType: "reset" | "submit" | "button";
    plain: boolean;
    autofocus: boolean;
    round: boolean;
}>> & {
    ButtonGroup: typeof ButtonGroup;
};
export declare const ElButtonGroup: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {} & {}> & ({} | {}), {}>;
